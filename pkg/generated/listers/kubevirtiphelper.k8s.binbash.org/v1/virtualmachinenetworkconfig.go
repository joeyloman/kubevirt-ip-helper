/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/joeyloman/kubevirt-ip-helper/pkg/apis/kubevirtiphelper.k8s.binbash.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineNetworkConfigLister helps list VirtualMachineNetworkConfigs.
// All objects returned here must be treated as read-only.
type VirtualMachineNetworkConfigLister interface {
	// List lists all VirtualMachineNetworkConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VirtualMachineNetworkConfig, err error)
	// VirtualMachineNetworkConfigs returns an object that can list and get VirtualMachineNetworkConfigs.
	VirtualMachineNetworkConfigs(namespace string) VirtualMachineNetworkConfigNamespaceLister
	VirtualMachineNetworkConfigListerExpansion
}

// virtualMachineNetworkConfigLister implements the VirtualMachineNetworkConfigLister interface.
type virtualMachineNetworkConfigLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineNetworkConfigLister returns a new VirtualMachineNetworkConfigLister.
func NewVirtualMachineNetworkConfigLister(indexer cache.Indexer) VirtualMachineNetworkConfigLister {
	return &virtualMachineNetworkConfigLister{indexer: indexer}
}

// List lists all VirtualMachineNetworkConfigs in the indexer.
func (s *virtualMachineNetworkConfigLister) List(selector labels.Selector) (ret []*v1.VirtualMachineNetworkConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualMachineNetworkConfig))
	})
	return ret, err
}

// VirtualMachineNetworkConfigs returns an object that can list and get VirtualMachineNetworkConfigs.
func (s *virtualMachineNetworkConfigLister) VirtualMachineNetworkConfigs(namespace string) VirtualMachineNetworkConfigNamespaceLister {
	return virtualMachineNetworkConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineNetworkConfigNamespaceLister helps list and get VirtualMachineNetworkConfigs.
// All objects returned here must be treated as read-only.
type VirtualMachineNetworkConfigNamespaceLister interface {
	// List lists all VirtualMachineNetworkConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VirtualMachineNetworkConfig, err error)
	// Get retrieves the VirtualMachineNetworkConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.VirtualMachineNetworkConfig, error)
	VirtualMachineNetworkConfigNamespaceListerExpansion
}

// virtualMachineNetworkConfigNamespaceLister implements the VirtualMachineNetworkConfigNamespaceLister
// interface.
type virtualMachineNetworkConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineNetworkConfigs in the indexer for a given namespace.
func (s virtualMachineNetworkConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.VirtualMachineNetworkConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualMachineNetworkConfig))
	})
	return ret, err
}

// Get retrieves the VirtualMachineNetworkConfig from the indexer for a given namespace and name.
func (s virtualMachineNetworkConfigNamespaceLister) Get(name string) (*v1.VirtualMachineNetworkConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("virtualmachinenetworkconfig"), name)
	}
	return obj.(*v1.VirtualMachineNetworkConfig), nil
}
