/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VirtualMachineNetworkConfigSpecApplyConfiguration represents an declarative configuration of the VirtualMachineNetworkConfigSpec type for use
// with apply.
type VirtualMachineNetworkConfigSpecApplyConfiguration struct {
	VMName        *string                           `json:"vmname,omitempty"`
	NetworkConfig []NetworkConfigApplyConfiguration `json:"networkconfig,omitempty"`
}

// VirtualMachineNetworkConfigSpecApplyConfiguration constructs an declarative configuration of the VirtualMachineNetworkConfigSpec type for use with
// apply.
func VirtualMachineNetworkConfigSpec() *VirtualMachineNetworkConfigSpecApplyConfiguration {
	return &VirtualMachineNetworkConfigSpecApplyConfiguration{}
}

// WithVMName sets the VMName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VMName field is set to the value of the last call.
func (b *VirtualMachineNetworkConfigSpecApplyConfiguration) WithVMName(value string) *VirtualMachineNetworkConfigSpecApplyConfiguration {
	b.VMName = &value
	return b
}

// WithNetworkConfig adds the given value to the NetworkConfig field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NetworkConfig field.
func (b *VirtualMachineNetworkConfigSpecApplyConfiguration) WithNetworkConfig(values ...*NetworkConfigApplyConfiguration) *VirtualMachineNetworkConfigSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworkConfig")
		}
		b.NetworkConfig = append(b.NetworkConfig, *values[i])
	}
	return b
}
