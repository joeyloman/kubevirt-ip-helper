/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// IPv4ConfigApplyConfiguration represents an declarative configuration of the IPv4Config type for use
// with apply.
type IPv4ConfigApplyConfiguration struct {
	ServerIP     *string                 `json:"serverip,omitempty"`
	Subnet       *string                 `json:"subnet,omitempty"`
	Pool         *PoolApplyConfiguration `json:"pool,omitempty"`
	Router       *string                 `json:"router,omitempty"`
	DNS          []string                `json:"dns,omitempty"`
	DomainName   *string                 `json:"domainname,omitempty"`
	DomainSearch []string                `json:"domainsearch,omitempty"`
	NTP          []string                `json:"ntp,omitempty"`
	LeaseTime    *int                    `json:"leasetime,omitempty"`
}

// IPv4ConfigApplyConfiguration constructs an declarative configuration of the IPv4Config type for use with
// apply.
func IPv4Config() *IPv4ConfigApplyConfiguration {
	return &IPv4ConfigApplyConfiguration{}
}

// WithServerIP sets the ServerIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServerIP field is set to the value of the last call.
func (b *IPv4ConfigApplyConfiguration) WithServerIP(value string) *IPv4ConfigApplyConfiguration {
	b.ServerIP = &value
	return b
}

// WithSubnet sets the Subnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subnet field is set to the value of the last call.
func (b *IPv4ConfigApplyConfiguration) WithSubnet(value string) *IPv4ConfigApplyConfiguration {
	b.Subnet = &value
	return b
}

// WithPool sets the Pool field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pool field is set to the value of the last call.
func (b *IPv4ConfigApplyConfiguration) WithPool(value *PoolApplyConfiguration) *IPv4ConfigApplyConfiguration {
	b.Pool = value
	return b
}

// WithRouter sets the Router field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Router field is set to the value of the last call.
func (b *IPv4ConfigApplyConfiguration) WithRouter(value string) *IPv4ConfigApplyConfiguration {
	b.Router = &value
	return b
}

// WithDNS adds the given value to the DNS field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DNS field.
func (b *IPv4ConfigApplyConfiguration) WithDNS(values ...string) *IPv4ConfigApplyConfiguration {
	for i := range values {
		b.DNS = append(b.DNS, values[i])
	}
	return b
}

// WithDomainName sets the DomainName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DomainName field is set to the value of the last call.
func (b *IPv4ConfigApplyConfiguration) WithDomainName(value string) *IPv4ConfigApplyConfiguration {
	b.DomainName = &value
	return b
}

// WithDomainSearch adds the given value to the DomainSearch field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DomainSearch field.
func (b *IPv4ConfigApplyConfiguration) WithDomainSearch(values ...string) *IPv4ConfigApplyConfiguration {
	for i := range values {
		b.DomainSearch = append(b.DomainSearch, values[i])
	}
	return b
}

// WithNTP adds the given value to the NTP field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NTP field.
func (b *IPv4ConfigApplyConfiguration) WithNTP(values ...string) *IPv4ConfigApplyConfiguration {
	for i := range values {
		b.NTP = append(b.NTP, values[i])
	}
	return b
}

// WithLeaseTime sets the LeaseTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LeaseTime field is set to the value of the last call.
func (b *IPv4ConfigApplyConfiguration) WithLeaseTime(value int) *IPv4ConfigApplyConfiguration {
	b.LeaseTime = &value
	return b
}
